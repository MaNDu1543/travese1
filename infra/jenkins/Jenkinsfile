pipeline {
    agent any
    environment {
        AWS_REGION         = 'ap-south-1'
        AWS_ACCOUNT_ID     = '726661503021'
        ECR_REPO_BASE      = 'travel-ease'
        REPO_URI           = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        
        // Must match your Jenkins credential ID
        ECR_CREDENTIALS_ID = 'aws-ecr-credentials'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Push Images') {
            matrix {
                axes {
                    axis {
                        name 'SERVICE'
                        values 'booking', 'payment', 'user', 'frontend'
                    }
                }
                stages {
                    stage('Build') {
                        steps {
                            script {
                                def IMAGE_NAME = "${ECR_REPO_BASE}-${SERVICE}"
                                def IMAGE_TAG = env.BUILD_NUMBER ?: 'latest'

                                echo "üèóÔ∏è Building ${IMAGE_NAME}:${IMAGE_TAG} in services/${SERVICE}"

                                dir("services/${SERVICE}") {
                                    // Confirm Dockerfile exists
                                    sh 'ls -la Dockerfile'
                                    dockerImage = docker.build("${IMAGE_NAME}", ".")
                                }

                                // Push to ECR using Jenkins credentials
                                docker.withRegistry("https://${REPO_URI}", ECR_CREDENTIALS_ID) {
                                    echo "‚è´ Pushing ${IMAGE_NAME}:${IMAGE_TAG}"
                                    dockerImage.push(IMAGE_TAG)
                                    echo "‚è´ Pushing ${IMAGE_NAME}:latest"
                                    dockerImage.push('latest')
                                }

                                // Set image URI for Terraform
                                env["IMAGE_URI_${SERVICE.toUpperCase()}"] = "${REPO_URI}/${IMAGE_NAME}:${IMAGE_TAG}"
                            }
                        }
                    }
                }
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                script {
                    def services = ['booking', 'payment', 'user', 'frontend']
                    def missing = services.findAll { !env["IMAGE_URI_${it.toUpperCase()}"] }
                    
                    if (missing) {
                        error "‚ùå Missing image URIs for services: ${missing.join(', ')}"
                    }

                    dir('infra/terraform') {
                        sh 'terraform init'
                        sh """
                            terraform apply -auto-approve \
                              -var="booking_image_uri=${env.IMAGE_URI_BOOKING}" \
                              -var="payment_image_uri=${env.IMAGE_URI_PAYMENT}" \
                              -var="user_image_uri=${env.IMAGE_URI_USER}" \
                              -var="frontend_image_uri=${env.IMAGE_URI_FRONTEND}"
                        """
                    }
                }
            }
        }

        stage('ECS Redeploy (Optional)') {
            steps {
                dir('infra/terraform') {
                    sh 'terraform init'
                    sh 'terraform plan'
                    sh 'terraform apply -auto-approve'
                }
            }
        }
    }
    post {
        success {
            echo '‚úÖ Deployment succeeded!'
        }
        failure {
            echo '‚ùå Deployment failed!'
        }
        always {
            // ‚úÖ Safe: runs on whatever node was assigned (built-in or agent)
            node {
                echo 'üßπ Cleaning up workspace and Docker...'
                sh 'docker system prune -f || true'
                cleanWs()
            }
        }
    }
}
